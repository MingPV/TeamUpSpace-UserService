// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/userfollow/userfollow.proto

package userfollow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserFollowService_FollowUser_FullMethodName        = "/userfollow.UserFollowService/FollowUser"
	UserFollowService_UnfollowUser_FullMethodName      = "/userfollow.UserFollowService/UnfollowUser"
	UserFollowService_FindAllFollowers_FullMethodName  = "/userfollow.UserFollowService/FindAllFollowers"
	UserFollowService_FindAllFollowings_FullMethodName = "/userfollow.UserFollowService/FindAllFollowings"
)

// UserFollowServiceClient is the client API for UserFollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowServiceClient interface {
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	FindAllFollowers(ctx context.Context, in *FindAllFollowersRequest, opts ...grpc.CallOption) (*FindAllFollowersResponse, error)
	FindAllFollowings(ctx context.Context, in *FindAllFollowingsRequest, opts ...grpc.CallOption) (*FindAllFollowingsResponse, error)
}

type userFollowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowServiceClient(cc grpc.ClientConnInterface) UserFollowServiceClient {
	return &userFollowServiceClient{cc}
}

func (c *userFollowServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, UserFollowService_UnfollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindAllFollowers(ctx context.Context, in *FindAllFollowersRequest, opts ...grpc.CallOption) (*FindAllFollowersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllFollowersResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindAllFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindAllFollowings(ctx context.Context, in *FindAllFollowingsRequest, opts ...grpc.CallOption) (*FindAllFollowingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllFollowingsResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindAllFollowings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowServiceServer is the server API for UserFollowService service.
// All implementations must embed UnimplementedUserFollowServiceServer
// for forward compatibility.
type UserFollowServiceServer interface {
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	FindAllFollowers(context.Context, *FindAllFollowersRequest) (*FindAllFollowersResponse, error)
	FindAllFollowings(context.Context, *FindAllFollowingsRequest) (*FindAllFollowingsResponse, error)
	mustEmbedUnimplementedUserFollowServiceServer()
}

// UnimplementedUserFollowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserFollowServiceServer struct{}

func (UnimplementedUserFollowServiceServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedUserFollowServiceServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedUserFollowServiceServer) FindAllFollowers(context.Context, *FindAllFollowersRequest) (*FindAllFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFollowers not implemented")
}
func (UnimplementedUserFollowServiceServer) FindAllFollowings(context.Context, *FindAllFollowingsRequest) (*FindAllFollowingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFollowings not implemented")
}
func (UnimplementedUserFollowServiceServer) mustEmbedUnimplementedUserFollowServiceServer() {}
func (UnimplementedUserFollowServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowServiceServer will
// result in compilation errors.
type UnsafeUserFollowServiceServer interface {
	mustEmbedUnimplementedUserFollowServiceServer()
}

func RegisterUserFollowServiceServer(s grpc.ServiceRegistrar, srv UserFollowServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserFollowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserFollowService_ServiceDesc, srv)
}

func _UserFollowService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindAllFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindAllFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindAllFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindAllFollowers(ctx, req.(*FindAllFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindAllFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFollowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindAllFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindAllFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindAllFollowings(ctx, req.(*FindAllFollowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollowService_ServiceDesc is the grpc.ServiceDesc for UserFollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userfollow.UserFollowService",
	HandlerType: (*UserFollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _UserFollowService_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _UserFollowService_UnfollowUser_Handler,
		},
		{
			MethodName: "FindAllFollowers",
			Handler:    _UserFollowService_FindAllFollowers_Handler,
		},
		{
			MethodName: "FindAllFollowings",
			Handler:    _UserFollowService_FindAllFollowings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userfollow/userfollow.proto",
}
