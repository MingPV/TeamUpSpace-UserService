// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/userfollow/userfollow.proto

package userfollow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserFollowService_CreateUserFollow_FullMethodName   = "/userfollow.UserFollowService/CreateUserFollow"
	UserFollowService_FindUserFollowByID_FullMethodName = "/userfollow.UserFollowService/FindUserFollowByID"
	UserFollowService_FindAllByUser_FullMethodName      = "/userfollow.UserFollowService/FindAllByUser"
	UserFollowService_FindAllByFollowTo_FullMethodName  = "/userfollow.UserFollowService/FindAllByFollowTo"
	UserFollowService_FindAllUserFollows_FullMethodName = "/userfollow.UserFollowService/FindAllUserFollows"
	UserFollowService_DeleteUserFollow_FullMethodName   = "/userfollow.UserFollowService/DeleteUserFollow"
)

// UserFollowServiceClient is the client API for UserFollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowServiceClient interface {
	CreateUserFollow(ctx context.Context, in *CreateUserFollowRequest, opts ...grpc.CallOption) (*CreateUserFollowResponse, error)
	FindUserFollowByID(ctx context.Context, in *FindUserFollowByIDRequest, opts ...grpc.CallOption) (*FindUserFollowByIDResponse, error)
	FindAllByUser(ctx context.Context, in *FindAllByUserRequest, opts ...grpc.CallOption) (*FindAllByUserResponse, error)
	FindAllByFollowTo(ctx context.Context, in *FindAllByFollowToRequest, opts ...grpc.CallOption) (*FindAllByFollowToResponse, error)
	FindAllUserFollows(ctx context.Context, in *FindAllUserFollowsRequest, opts ...grpc.CallOption) (*FindAllUserFollowsResponse, error)
	DeleteUserFollow(ctx context.Context, in *DeleteUserFollowRequest, opts ...grpc.CallOption) (*DeleteUserFollowResponse, error)
}

type userFollowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowServiceClient(cc grpc.ClientConnInterface) UserFollowServiceClient {
	return &userFollowServiceClient{cc}
}

func (c *userFollowServiceClient) CreateUserFollow(ctx context.Context, in *CreateUserFollowRequest, opts ...grpc.CallOption) (*CreateUserFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserFollowResponse)
	err := c.cc.Invoke(ctx, UserFollowService_CreateUserFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindUserFollowByID(ctx context.Context, in *FindUserFollowByIDRequest, opts ...grpc.CallOption) (*FindUserFollowByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserFollowByIDResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindUserFollowByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindAllByUser(ctx context.Context, in *FindAllByUserRequest, opts ...grpc.CallOption) (*FindAllByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByUserResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindAllByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindAllByFollowTo(ctx context.Context, in *FindAllByFollowToRequest, opts ...grpc.CallOption) (*FindAllByFollowToResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllByFollowToResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindAllByFollowTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) FindAllUserFollows(ctx context.Context, in *FindAllUserFollowsRequest, opts ...grpc.CallOption) (*FindAllUserFollowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllUserFollowsResponse)
	err := c.cc.Invoke(ctx, UserFollowService_FindAllUserFollows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowServiceClient) DeleteUserFollow(ctx context.Context, in *DeleteUserFollowRequest, opts ...grpc.CallOption) (*DeleteUserFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserFollowResponse)
	err := c.cc.Invoke(ctx, UserFollowService_DeleteUserFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowServiceServer is the server API for UserFollowService service.
// All implementations must embed UnimplementedUserFollowServiceServer
// for forward compatibility.
type UserFollowServiceServer interface {
	CreateUserFollow(context.Context, *CreateUserFollowRequest) (*CreateUserFollowResponse, error)
	FindUserFollowByID(context.Context, *FindUserFollowByIDRequest) (*FindUserFollowByIDResponse, error)
	FindAllByUser(context.Context, *FindAllByUserRequest) (*FindAllByUserResponse, error)
	FindAllByFollowTo(context.Context, *FindAllByFollowToRequest) (*FindAllByFollowToResponse, error)
	FindAllUserFollows(context.Context, *FindAllUserFollowsRequest) (*FindAllUserFollowsResponse, error)
	DeleteUserFollow(context.Context, *DeleteUserFollowRequest) (*DeleteUserFollowResponse, error)
	mustEmbedUnimplementedUserFollowServiceServer()
}

// UnimplementedUserFollowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserFollowServiceServer struct{}

func (UnimplementedUserFollowServiceServer) CreateUserFollow(context.Context, *CreateUserFollowRequest) (*CreateUserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFollow not implemented")
}
func (UnimplementedUserFollowServiceServer) FindUserFollowByID(context.Context, *FindUserFollowByIDRequest) (*FindUserFollowByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserFollowByID not implemented")
}
func (UnimplementedUserFollowServiceServer) FindAllByUser(context.Context, *FindAllByUserRequest) (*FindAllByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByUser not implemented")
}
func (UnimplementedUserFollowServiceServer) FindAllByFollowTo(context.Context, *FindAllByFollowToRequest) (*FindAllByFollowToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByFollowTo not implemented")
}
func (UnimplementedUserFollowServiceServer) FindAllUserFollows(context.Context, *FindAllUserFollowsRequest) (*FindAllUserFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUserFollows not implemented")
}
func (UnimplementedUserFollowServiceServer) DeleteUserFollow(context.Context, *DeleteUserFollowRequest) (*DeleteUserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFollow not implemented")
}
func (UnimplementedUserFollowServiceServer) mustEmbedUnimplementedUserFollowServiceServer() {}
func (UnimplementedUserFollowServiceServer) testEmbeddedByValue()                           {}

// UnsafeUserFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowServiceServer will
// result in compilation errors.
type UnsafeUserFollowServiceServer interface {
	mustEmbedUnimplementedUserFollowServiceServer()
}

func RegisterUserFollowServiceServer(s grpc.ServiceRegistrar, srv UserFollowServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserFollowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserFollowService_ServiceDesc, srv)
}

func _UserFollowService_CreateUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).CreateUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_CreateUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).CreateUserFollow(ctx, req.(*CreateUserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindUserFollowByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserFollowByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindUserFollowByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindUserFollowByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindUserFollowByID(ctx, req.(*FindUserFollowByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindAllByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindAllByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindAllByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindAllByUser(ctx, req.(*FindAllByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindAllByFollowTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByFollowToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindAllByFollowTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindAllByFollowTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindAllByFollowTo(ctx, req.(*FindAllByFollowToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_FindAllUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).FindAllUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_FindAllUserFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).FindAllUserFollows(ctx, req.(*FindAllUserFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollowService_DeleteUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServiceServer).DeleteUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollowService_DeleteUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServiceServer).DeleteUserFollow(ctx, req.(*DeleteUserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollowService_ServiceDesc is the grpc.ServiceDesc for UserFollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userfollow.UserFollowService",
	HandlerType: (*UserFollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserFollow",
			Handler:    _UserFollowService_CreateUserFollow_Handler,
		},
		{
			MethodName: "FindUserFollowByID",
			Handler:    _UserFollowService_FindUserFollowByID_Handler,
		},
		{
			MethodName: "FindAllByUser",
			Handler:    _UserFollowService_FindAllByUser_Handler,
		},
		{
			MethodName: "FindAllByFollowTo",
			Handler:    _UserFollowService_FindAllByFollowTo_Handler,
		},
		{
			MethodName: "FindAllUserFollows",
			Handler:    _UserFollowService_FindAllUserFollows_Handler,
		},
		{
			MethodName: "DeleteUserFollow",
			Handler:    _UserFollowService_DeleteUserFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userfollow/userfollow.proto",
}
