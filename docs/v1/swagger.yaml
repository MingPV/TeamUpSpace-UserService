basePath: /api/v1
definitions:
  entities.Profile:
    properties:
      id:
        type: integer
      total:
        type: number
    type: object
  entities.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  response.MessageResponse:
    properties:
      message:
        example: example message
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is the backend API for CleanGO project.
  title: CleanGO API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login credentials (email & password)
        in: body
        name: credentials
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user and JWT token
          schema:
            additionalProperties: true
            type: object
      summary: Authenticate user and return token
      tags:
      - users
  /auth/signup:
    post:
      consumes:
      - application/json
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entities.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
      summary: Register a new user
      tags:
      - users
  /profiles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Profile'
            type: array
      summary: Get all profiles
      tags:
      - profiles
    post:
      consumes:
      - application/json
      parameters:
      - description: Profile payload
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/entities.Profile'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Profile'
      summary: Create a new profile
      tags:
      - profiles
  /profiles/{id}:
    delete:
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
      summary: Delete an profile by ID
      tags:
      - profiles
    get:
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Profile'
      summary: Get profile by ID
      tags:
      - profiles
    patch:
      consumes:
      - application/json
      parameters:
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      - description: Profile update payload
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/entities.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Profile'
      summary: Update an profile partially
      tags:
      - profiles
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.User'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Get user by ID
      tags:
      - users
  /users/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
      summary: Get currently authenticated user
      tags:
      - users
swagger: "2.0"
